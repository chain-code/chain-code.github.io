<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Soulmate</title>
    <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Soulmate</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Apr 2023 20:07:07 +0800</lastBuildDate><atom:link href="https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vite&#43;Vue快速搭建项目</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vite&#43;vue%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vite&#43;vue%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid>
      <description>Vite+Vue快速搭建项目 # npm init vite@latest 输入项目名，选择Vue 选择TypeScript 回车 再运行
npm install -y 快速创建一个默认的包信息
npm init -y -D开发环境中的依赖，加载vite
npm i vite -D 生成&amp;quot;devDependencies&amp;quot;，开发环境下的依赖
从工作区index.html为入口</description>
    </item>
    
    <item>
      <title>Vue3</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vue3/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vue3/</guid>
      <description> Vue3 # watch函数 # watch函数：这是Vue 3提供的一个响应式API，用于观察和响应reactive状态的变化。
watch(() =&amp;gt; store.page,(newPage, oldPage) =&amp;gt; {getRawItem(store.page)} a. 第一个参数：() =&amp;gt; store.page
这是一个箭头函数，返回被监视的值（store.page）。 每当store.page发生变化时，这个函数会被重新执行。 b. 第二个参数：(newPage, oldPage) =&amp;gt; { getRawItem(store.page) }
这是一个回调函数，当被监视的值变化时会被调用。 newPage参数代表store.page的新值。 oldPage参数代表store.page的旧值。 函数体内调用了getRawItem(store.page)。 </description>
    </item>
    
    <item>
      <title>Vue环境搭建</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Vue环境搭建 # VueJS 是一个开源的渐进式 JavaScript 框架，用于开发交互式 Web 界面。
它是用于简化 Web 开发的着名框架之一，VueJS 专注于视图层。它可以很容易地集成到大型项目前端开发没有任何问题。
Vue 中文网：https://cn.vuejs.org/ 安装 node.js # 安装 # 下载地址：https://nodejs.org/en/download/
windows 版一路往下点
安装完成：
$ npm -v 6.14.6 设置路径 # 设置 nodejs prefix（全局）和 cache（缓存）路径
在 nodejs 安装路径下，新建 node_global 和 node_cache 两个文件夹
设置缓存文件夹
npm config set cache &amp;#34;C:\Program Files\nodejs\node_cache&amp;#34; 设置全局模块存放路径
npm config set prefix &amp;#34;C:\Program Files\nodejs\node_global&amp;#34; 设置成功后，之后用命令 npm install XXX -g 安装以后模块就在C:\Program Files\nodejs\node_global 里
安装镜像 # 基于 Node.js 安装 cnpm（淘宝镜像）
npm install -g cnpm --registry=https://registry.</description>
    </item>
    
    <item>
      <title>Web Socket</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/websocket/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/websocket/</guid>
      <description>WebSocket # WebSocket - Web API 接口参考 |多核 (mozilla.org)
WebSocket API是一种先进的技术，可以在用户的浏览器和服务器之间打开双向交互通信会话。使用此 API，您可以向服务器发送消息并接收事件驱动的响应，而无需轮询服务器以获取答复。
官方示例 # Chat Example
官方示例可参照synk项目结合gin框架
官方介绍
main.go # package main import ( &amp;#34;flag&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) var addr = flag.String(&amp;#34;addr&amp;#34;, &amp;#34;:8080&amp;#34;, &amp;#34;http service address&amp;#34;) func serveHome(w http.ResponseWriter, r *http.Request) { log.Println(r.URL) if r.URL.Path != &amp;#34;/&amp;#34; { http.Error(w, &amp;#34;Not found&amp;#34;, http.StatusNotFound) return } if r.Method != http.MethodGet { http.Error(w, &amp;#34;Method not allowed&amp;#34;, http.StatusMethodNotAllowed) return } http.ServeFile(w, r, &amp;#34;home.html&amp;#34;) } func main() { flag.</description>
    </item>
    
    <item>
      <title>WebStorm-debug</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/webstorm-debug/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/webstorm-debug/</guid>
      <description> WebStorm-debug # 1. 运行项目，查看运行url # 比如我的测试项目使用npm run serve运行后展示的端口是5174
2. 配置JavaScript Debug # 3. Debug # </description>
    </item>
    
  </channel>
</rss>
