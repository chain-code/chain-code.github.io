<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Soulmate</title>
    <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Soulmate</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Apr 2023 20:07:07 +0800</lastBuildDate><atom:link href="https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Socket</title>
      <link>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/websocket/</link>
      <pubDate>Wed, 19 Apr 2023 20:07:07 +0800</pubDate>
      
      <guid>https://chain-code.github.io/docs/%E5%89%8D%E7%AB%AF/websocket/</guid>
      <description>WebSocket # WebSocket - Web API 接口参考 |多核 (mozilla.org)
WebSocket API是一种先进的技术，可以在用户的浏览器和服务器之间打开双向交互通信会话。使用此 API，您可以向服务器发送消息并接收事件驱动的响应，而无需轮询服务器以获取答复。
官方示例 # Chat Example
官方示例可参照synk项目结合gin框架
官方介绍
main.go # package main import ( &amp;#34;flag&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) var addr = flag.String(&amp;#34;addr&amp;#34;, &amp;#34;:8080&amp;#34;, &amp;#34;http service address&amp;#34;) func serveHome(w http.ResponseWriter, r *http.Request) { log.Println(r.URL) if r.URL.Path != &amp;#34;/&amp;#34; { http.Error(w, &amp;#34;Not found&amp;#34;, http.StatusNotFound) return } if r.Method != http.MethodGet { http.Error(w, &amp;#34;Method not allowed&amp;#34;, http.StatusMethodNotAllowed) return } http.ServeFile(w, r, &amp;#34;home.html&amp;#34;) } func main() { flag.</description>
    </item>
    
  </channel>
</rss>
